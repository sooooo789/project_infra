terraform {
  required_providers {
    aws = { source = "hashicorp/aws", version = ">= 5.0" }
  }
}

provider "aws" {
  region = "ap-northeast-2"
  # profile = "gjlab"  # 환경변수로 잡혀있으면 생략
}

############################
# 🔧 여기 3곳만 네 값으로 수정
############################
variable "vpc_id" {
  description = "이미 만든 VPC ID"
  type        = string
  default     = "vpc-009884452bcbdb7b7"            # ← VPC ID로 교체
}

variable "public_subnet_ids" {
  description = "퍼블릭 서브넷 2개(예: 2a, 2c)"
  type        = list(string)
  default     = ["subnet-02f862538546caf3e", "subnet-043862d181e3189a3"]   # ← 서브넷 ID들로 교체
}

variable "s3_data_bucket" {
  description = "앱 데이터/ALB 로그용 S3 버킷명"
  type        = string
  default     = "project-jj"    # ← 실제 버킷명으로 교체
}

############################
# AMI (Ubuntu 24.04 LTS)
############################
data "aws_ami" "ubuntu" {
  most_recent = true
  owners      = ["099720109477"] # Canonical
  filter { name = "name", values = ["ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-amd64-server-*"] }
  filter { name = "virtualization-type", values = ["hvm"] }
}

############################
# Security Groups
############################
resource "aws_security_group" "alb_sg" {
  name        = "gj-lab-alb-sg"
  description = "ALB 80/443"
  vpc_id      = var.vpc_id

  ingress { protocol = "tcp" from_port = 80  to_port = 80  cidr_blocks = ["0.0.0.0/0"] }
  ingress { protocol = "tcp" from_port = 443 to_port = 443 cidr_blocks = ["0.0.0.0/0"] }
  egress  { protocol = "-1"  from_port = 0   to_port = 0   cidr_blocks = ["0.0.0.0/0"] }
}

resource "aws_security_group" "app_sg" {
  name        = "gj-lab-app-sg"
  description = "8080 from ALB only"
  vpc_id      = var.vpc_id

  ingress {
    protocol        = "tcp"
    from_port       = 8080
    to_port         = 8080
    security_groups = [aws_security_group.alb_sg.id] # SG→SG
    description     = "only from ALB"
  }
  egress { protocol = "-1" from_port = 0 to_port = 0 cidr_blocks = ["0.0.0.0/0"] }
}

############################
# IAM (EC2 → SSM + S3)
############################
data "aws_iam_policy_document" "ec2_assume" {
  statement {
    actions = ["sts:AssumeRole"]
    principals { type = "Service", identifiers = ["ec2.amazonaws.com"] }
  }
}

resource "aws_iam_role" "app_role" {
  name               = "gj-lab-app-role"
  assume_role_policy = data.aws_iam_policy_document.ec2_assume.json
}

data "aws_iam_policy_document" "s3_access" {
  statement {
    actions   = ["s3:GetObject","s3:PutObject","s3:ListBucket"]
    resources = [
      "arn:aws:s3:::${var.s3_data_bucket}",
      "arn:aws:s3:::${var.s3_data_bucket}/*"
    ]
  }
}

resource "aws_iam_policy" "s3_access" {
  name   = "gj-lab-s3-access"
  policy = data.aws_iam_policy_document.s3_access.json
}

resource "aws_iam_role_policy_attachment" "ssm_core" {
  role       = aws_iam_role.app_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}
resource "aws_iam_role_policy_attachment" "s3_attach" {
  role       = aws_iam_role.app_role.name
  policy_arn = aws_iam_policy.s3_access.arn
}

resource "aws_iam_instance_profile" "app_profile" {
  name = "gj-lab-app-profile"
  role = aws_iam_role.app_role.name
}

############################
# Launch Template (Streamlit 8080)
############################
locals {
  user_data = <<-EOT
    #!/bin/bash
    set -eux
    apt-get update -y
    apt-get install -y python3-pip python3-venv

    python3 -m venv /opt/appenv
    /opt/appenv/bin/pip install --upgrade pip
    /opt/appenv/bin/pip install streamlit pandas plotly boto3

    mkdir -p /opt/app
    cat >/opt/app/app.py <<'PY'
    import streamlit as st
    st.set_page_config(page_title="gj-lab", layout="wide")
    st.title("gj-lab: Streamlit on EC2")
    st.write("Health check: /_stcore/health")
    PY
    chown -R ubuntu:ubuntu /opt/app

    cat >/etc/systemd/system/streamlit.service <<'SVC'
    [Unit]
    Description=Streamlit App
    After=network-online.target
    [Service]
    Type=simple
    User=ubuntu
    WorkingDirectory=/opt/app
    ExecStart=/opt/appenv/bin/streamlit run app.py --server.address 0.0.0.0 --server.port 8080
    Restart=always
    [Install]
    WantedBy=multi-user.target
    SVC

    systemctl daemon-reload
    systemctl enable --now streamlit
  EOT
}

resource "aws_launch_template" "lt" {
  name_prefix   = "gj-lab-lt-"
  image_id      = data.aws_ami.ubuntu.id
  instance_type = "t3.micro"

  iam_instance_profile { name = aws_iam_instance_profile.app_profile.name }
  vpc_security_group_ids = [aws_security_group.app_sg.id]
  user_data = base64gzip(local.user_data)

  tag_specifications {
    resource_type = "instance"
    tags = { Name = "gj-lab-ec2", Project = "gj-lab" }
  }
}

############################
# Target Group + ALB + Listener(80)
############################
resource "aws_lb_target_group" "tg" {
  name        = "gj-lab-tg"
  port        = 8080
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"

  health_check {
    path                = "/_stcore/health"
    matcher             = "200"
    interval            = 30
    unhealthy_threshold = 3
    healthy_threshold   = 3
    timeout             = 5
  }
}

resource "aws_lb" "alb" {
  name               = "gj-lab-alb"
  load_balancer_type = "application"
  internal           = false
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = var.public_subnet_ids

  access_logs {
    enabled = true
    bucket  = var.s3_data_bucket
    prefix  = "alb-logs"
  }
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn
  }
}

############################
# Auto Scaling Group (퍼블릭 2AZ)
############################
resource "aws_autoscaling_group" "asg" {
  name                = "gj-lab-asg"
  desired_capacity    = 1
  min_size            = 1
  max_size            = 2
  health_check_type   = "ELB"
  vpc_zone_identifier = var.public_subnet_ids
  target_group_arns   = [aws_lb_target_group.tg.arn]

  launch_template {
    id      = aws_launch_template.lt.id
    version = "$Latest"
  }
}

############################
# Output
############################
output "alb_dns" {
  value = aws_lb.alb.dns_name
}
